let CONFIG=null; let STATE={member:null,rooms:[],tariffs:null,calendar:null,policies:null,promotions:[],selected:[]};
const el=(id)=>document.getElementById(id); const fmtINR=(v)=> new Intl.NumberFormat('en-IN',{style:'currency',currency:'INR',maximumFractionDigits:0}).format(v);

async function loadConfig(){ try{ CONFIG=await (await fetch('config.json')).json(); }catch(e){ CONFIG=await (await fetch('config.example.json')).json(); } }
async function loadPromotionsFromFirestore(){
  try{ if(!CONFIG?.firebase?.apiKey) return null; const app=firebase.apps?.length?firebase.app():firebase.initializeApp(CONFIG.firebase); const db=firebase.firestore(); const snap=await db.collection('promotions').get(); const arr=[]; snap.forEach(doc=>arr.push(doc.data())); return arr; }catch(e){ return null; }
}
async function loadData(){
  STATE.rooms = await (await fetch('data/rooms.json')).json();
  STATE.tariffs = await (await fetch('data/tariffs.json')).json();
  STATE.calendar = await (await fetch('data/calendar.json')).json();
  STATE.policies = await (await fetch('data/policies.json')).json();
  try{
    if (CONFIG?.promotions?.source === 'firestore'){
      const fs = await loadPromotionsFromFirestore(); STATE.promotions = Array.isArray(fs)?fs:[]; if(!STATE.promotions.length) throw new Error('No Firestore promos');
    } else {
      STATE.promotions = (await (await fetch('data/promotions.json')).json()).promotions || [];
    }
  }catch(e){ STATE.promotions = []; }
  const uniqBlocks=[...new Set(STATE.rooms.map(r=>r.block))].sort(); const sel=el('blockPref'); uniqBlocks.forEach(b=>{const o=document.createElement('option');o.value=b;o.textContent=b;sel.appendChild(o);});
}

function todayStr(o=0){ return dayjs().add(o,'day').format('YYYY-MM-DD'); }
function setupDates(){ el('checkin').value=todayStr(7); el('checkout').value=todayStr(10); }
function policyFlags(dateStr){ const d=dayjs(dateStr); const y=d.year(); const iso=d.format('YYYY-MM-DD'); const flags={isSpecial:false,isLongWeekend:false,isClosed:false,isNonSeason:false,isSummer:false,label:'Regular'}; const cal=STATE.calendar[y]||{special:[],closed:[],long_weekends:[],seasons:[]}; for(const s of (cal.special||[])){ if(iso>=s.start && iso<=s.end){ flags.isSpecial=true; flags.label=s.name||'Special'; break; } } for(const c of (cal.closed||[])){ if(iso>=c.start && iso<=c.end){ flags.isClosed=true; flags.label='Closed'; break; } } for(const lw of (cal.long_weekends||[])){ if(iso>=lw.start && iso<=lw.end){ flags.isLongWeekend=true; } } for(const season of (cal.seasons||[])){ if(iso>=season.start && iso<=season.end){ if(season.type==='summer') flags.isSummer=true; if(season.type==='nonseason') flags.isNonSeason=true; } } return flags; }
function nightsBetween(ci,co){ return Math.max(0, dayjs(co).diff(dayjs(ci),'day')); }
function eligibleRooms(req){ return STATE.rooms.filter(r=> (!req.block||r.block===req.block) && (!req.ac||r.ac) && (!req.wheelchair||r.wheelchair) && (!req.pet||r.pet)); }
function computePriceLine(dateStr, isMember, isSenior, room, pax){ const flags=policyFlags(dateStr); const t=STATE.tariffs; const card=flags.isSpecial?t.special:t.regular; let base=0,ea=0,ec=0; if(isMember){ base=isSenior?card.member_senior_double:card.member_double; ea=isSenior?card.extra_adult_senior:card.extra_adult; ec=card.extra_child; } else { base=card.temp_double; ea=card.temp_extra_adult; ec=card.temp_extra_child; } const extraA=Math.max(0,(pax.adults||0)-2); const extraC=Math.max(0,(pax.children||0)); let total=base + extraA*ea + extraC*ec; if(room.ac && pax.wantAC) total += (t.ac_addon||0); return {date:dateStr,label:flags.label,total}; }
function renderAvailability(){ const wrap=el('availability'); wrap.classList.remove('hidden'); const ci=el('checkin').value, co=el('checkout').value; const nights=nightsBetween(ci,co); const req={ac:el('attrAC').checked,wheelchair:el('attrWheel').checked,pet:el('attrPet').checked,block:el('blockPref').value}; const list=eligibleRooms(req); if(!nights||!list.length){ wrap.innerHTML='<p class="muted">No rooms found for the chosen filters or invalid dates.</p>'; return; } let html='<table class="table"><thead><tr><th>Select</th><th>Room</th><th>Block</th><th>AC</th><th>Wheelchair</th><th>Pet</th></tr></thead><tbody>'; for(const r of list){ html+=`<tr><td><input type="checkbox" class="pickRoom" data-room="${r.room_no}"></td><td>${r.label||r.room_no}</td><td>${r.block}</td><td>${r.ac?'<span class="tag ok">Yes</span>':'—'}</td><td>${r.wheelchair?'<span class="tag ok">Yes</span>':'—'}</td><td>${r.pet?'<span class="tag ok">Yes</span>':'—'}</td></tr>`; } html+='</tbody></table>'; wrap.innerHTML=html; document.querySelectorAll('.pickRoom').forEach(cb=> cb.addEventListener('change', ()=>{ const id=cb.dataset.room; if(cb.checked){ if(!STATE.selected.includes(id)) STATE.selected.push(id);} else { STATE.selected = STATE.selected.filter(x=>x!==id);} calcPrice(); })); }
function dowStr(d){ return dayjs(d).format('ddd'); }
function condMatch(cond,ctx){ if(cond.members_only && !ctx.isMember) return false; if(cond.senior_only && !ctx.isSenior) return false; if(cond.min_nights && ctx.nights<cond.min_nights) return false; if(cond.max_nights && ctx.nights>cond.max_nights) return false; if(cond.blocks && cond.blocks.length && !cond.blocks.includes(ctx.block)) return false; if(cond.rooms && cond.rooms.length && !cond.rooms.includes(ctx.room_no)) return false; if(cond.days_of_week && cond.days_of_week.length){ const d=dowStr(ctx.date); if(!cond.days_of_week.includes(d)) return false; } if(cond.date_start && ctx.date<cond.date_start) return false; if(cond.date_end && ctx.date>cond.date_end) return false; return true; }
function applyPromotions(dates, perDayTotals, ctx){ if(!STATE.promotions||!STATE.promotions.length) return {adjustment:0,lines:[]}; const promos=STATE.promotions.filter(p=>p.active).sort((a,b)=>(a.priority||0)-(b.priority||0)); let adjust=0; let lines=[]; const roomCount=ctx.roomCount||1; const nights=dates.length; for(const p of promos){ const cond=p.conditions||{}; if(p.type==='bxgy'){ if(!condMatch(cond,{date:dates[0],block:ctx.block,room_no:ctx.room_no,isMember:ctx.isMember,isSenior:ctx.isSenior,nights})) continue; const group=(p.buy_n||0)+(p.get_n||0); if(group<=0) continue; const freeGroups=Math.floor(nights/group); const freeNights=freeGroups*(p.get_n||0); if(freeNights>0){ const avg=perDayTotals.reduce((s,x)=>s+x.perRoomTotal,0)/nights; const disc=avg*freeNights*roomCount; adjust-=disc; lines.push(`${p.name}: -${fmtINR(Math.round(disc))}`);} continue; } if(p.type==='percent'||p.type==='flat'){ let disc=0; for(let i=0;i<dates.length;i++){ const d=dates[i]; const row=perDayTotals[i]; if(!condMatch(cond,{date:d,block:ctx.block,room_no:ctx.room_no,isMember:ctx.isMember,isSenior:ctx.isSenior,nights})) continue; const base=row.perRoomTotal; disc += (p.type==='percent'? base*(p.value||0)/100 : (p.value||0)) * roomCount; } if(disc>0){ adjust-=disc; lines.push(`${p.name}: -${fmtINR(Math.round(disc))}`);} } } return {adjustment:adjust,lines}; }
function calcPrice(){ const ci=el('checkin').value, co=el('checkout').value; const nights=nightsBetween(ci,co); const adults=parseInt(el('adults').value||'0',10), children=parseInt(el('children').value||'0',10); const veg=parseInt(el('vegCount').value||'0',10), nveg=parseInt(el('nvegCount').value||'0',10); const wantAC=el('attrAC').checked; const isMember=!!STATE.member; const isSenior=STATE.member?.isSenior||false; const totalPax=adults+children; const mealsOk=(veg+nveg)===totalPax; const summary=el('priceSummary'); if(!nights||!STATE.selected.length){ summary.innerHTML='<p class="muted">Select at least one room and valid dates.</p>'; el('btnPay').disabled=true; return;} if(!mealsOk){ summary.innerHTML='<p class="muted">Veg + Non-Veg count must equal total guests.</p>'; el('btnPay').disabled=true; return;} const dates=Array.from({length:nights},(_,i)=> dayjs(ci).add(i,'day').format('YYYY-MM-DD')); const firstRoom=STATE.rooms.find(r=> r.room_no===STATE.selected[0]); let grand=0; let rows=''; const perDayTotals=[]; for(const d of dates){ const line=computePriceLine(d, isMember, isSenior, firstRoom, {adults,children,wantAC}); const perRoom=line.total; const perRooms=perRoom*STATE.selected.length; grand+=perRooms; perDayTotals.push({date:d, perRoomTotal:perRoom}); rows+=`<tr><td>${d}</td><td>${line.label}</td><td>${fmtINR(perRoom)} x ${STATE.selected.length} room(s)</td></tr>`; } const promo=applyPromotions(dates, perDayTotals, {isMember,isSenior,block:firstRoom.block,room_no:firstRoom.room_no,nights,roomCount:STATE.selected.length}); const discounted=grand + promo.adjustment; const bbqPerHead=STATE.tariffs.bbq_pp||210; const bbqNote=STATE.calendar.bbq_days?.length?' (if BBQ day)':''; const table=`<table class="table"><thead><tr><th>Date</th><th>Type</th><th>Rate</th></tr></thead><tbody>${rows}</tbody><tfoot><tr><th colspan="2">Rooms Subtotal</th><th>${fmtINR(grand)}</th></tr>${promo.lines.map(l=>`<tr><td colspan='3' class='small'>${l}</td></tr>`).join('')}<tr><th colspan="2">Total after Promotions</th><th>${fmtINR(Math.max(0, Math.round(discounted)))}</th></tr><tr><td colspan="3" class="small muted">AC add-on applies only where available & selected. BBQ add-on ₹${bbqPerHead}${bbqNote} per person.</td></tr></tfoot></table>`; summary.innerHTML=table; el('btnPay').disabled=!el('agreeRules').checked; }
function loadMembers(){ return fetch('data/members.csv').then(r=>r.text()).then(text=> new Promise((res)=> Papa.parse(text,{header:true,skipEmptyLines:true,complete:(out)=>res(out.data)}))); }
async function lookupMember(){ const id=el('memberId').value.trim(); const email=el('memberEmail').value.trim().toLowerCase(); const phone=el('memberPhone').value.replace(/\s/g,''); const members=await loadMembers(); const m=members.find(x=> (id && (x.MemberID||'').toLowerCase()===id.toLowerCase()) || (email && (x.Email||'').toLowerCase()===email) || (phone && (x.Phone||'')===phone)); const info=el('memberInfo'); if(!m){ info.classList.remove('hidden'); info.textContent='Member not found. Continue in Demo or update members.csv.'; STATE.member=null; } else { STATE.member={id:m.MemberID,name:m.Name,phone:m.Phone,email:m.Email,isSenior:(parseInt(m.Age||'0',10)>=65),dues:parseFloat(m.Dues||'0')}; info.classList.remove('hidden'); info.innerHTML=`<strong>${STATE.member.name}</strong> (${STATE.member.id}) — Dues: ${fmtINR(STATE.member.dues||0)}${STATE.member.isSenior?' — <span class="tag ok">Senior</span>':''}`; } }
function setupAuth(){ if(!CONFIG?.firebase?.apiKey){ document.querySelector('#btnSendOtp').disabled=true; return;} firebase.initializeApp(CONFIG.firebase); window.recaptchaVerifier=new firebase.auth.RecaptchaVerifier('btnSendOtp',{size:'invisible'}); document.querySelector('#btnSendOtp').addEventListener('click', async()=>{ const phone=el('memberPhone').value.trim(); if(!phone) return alert('Enter phone number with country code'); try{ const c=await firebase.auth().signInWithPhoneNumber(phone, window.recaptchaVerifier); window._confirmation=c; el('otpBox').classList.remove('hidden'); }catch(e){ alert('OTP error: '+e.message);} }); document.querySelector('#btnVerifyOtp').addEventListener('click', async()=>{ try{ const code=el('otpCode').value.trim(); await window._confirmation.confirm(code); const user=firebase.auth().currentUser; el('memberInfo').classList.remove('hidden'); el('memberInfo').textContent='Phone verified: '+(user?.phoneNumber||''); await lookupMember(); }catch(e){ alert('Verify error: '+e.message);} }); }
function setupPayments(){ if(!CONFIG?.razorpay?.key_id){ document.querySelector('#btnPay').textContent='Confirm (No Online Payment)'; } }
function handleConfirmPayment(){ document.querySelector('#btnPay').addEventListener('click', async()=>{ if(!el('agreeRules').checked) { alert('Accept rules to continue.'); return; } const ci=el('checkin').value, co=el('checkout').value; const nights=nightsBetween(ci,co); if(!nights || !STATE.selected.length) return alert('Select dates and rooms.'); const rec={ createdAt:new Date().toISOString(), member:STATE.member, rooms:STATE.selected, ci, co, pax:{ adults:parseInt(el('adults').value||'0',10), children:parseInt(el('children').value||'0',10), veg:parseInt(el('vegCount').value||'0',10), nveg:parseInt(el('nvegCount').value||'0',10), wantAC:el('attrAC').checked } }; localStorage.setItem('lastBooking', JSON.stringify(rec)); if(!CONFIG?.razorpay?.key_id){ alert('Booking submitted for admin confirmation. Online payment is disabled.'); return; } const options={ key:CONFIG.razorpay.key_id, amount:1000*100, currency:'INR', name:'The Club Mahabaleshwar', description:'Room booking advance (placeholder)', handler:function(resp){ alert('Payment ID: '+resp.razorpay_payment_id+'\n(Verify server-side for production)'); }, theme:{color:'#0ea5a5'} }; const rz=new Razorpay(options); rz.open(); }); document.querySelector('#btnHold').addEventListener('click', ()=> alert('Request recorded. Pay at check-in selected.')); }
function registerSW(){ if('serviceWorker' in navigator){ navigator.serviceWorker.register('service-worker.js'); } }
function bootstrap(){ el('year').textContent=new Date().getFullYear(); el('btnLookup').addEventListener('click', lookupMember); el('btnAnonymous').addEventListener('click', ()=>{ STATE.member=null; el('memberInfo').classList.remove('hidden'); el('memberInfo').textContent='Continuing in demo mode.'; }); el('btnAvailability').addEventListener('click', renderAvailability); el('agreeRules').addEventListener('change', calcPrice); ['adults','children','vegCount','nvegCount','attrAC'].forEach(id=> el(id).addEventListener('input', calcPrice)); handleConfirmPayment(); }
(async function init(){ await loadConfig(); await loadData(); setupDates(); setupAuth(); setupPayments(); bootstrap(); registerSW(); })();
